function [T]=compare_methods(Subjects,...
    windowLength,...
    overlap,...
    FeatureExtractionFnc,...
    Classifiers,...
    path)
L=1;
TrainedClassifiers={0};
h=waitbar(0,['Starting...']);
numRows=numel(Subjects)*...
    numel(windowLength)*...
    numel(overlap)*...
    numel(FeatureExtractionFnc)*...
    numel(Classifiers);
for SubjectsIdx=1:numel(Subjects)
    h=waitbar(L/numRows,h,['Reading Trials of Subject ',num2str(SubjectsIdx)]);

    for I=1:size(Subjects{SubjectsIdx}.TrainingDataPath,1)
        TrainingTrialCollection{I}=BCISTD.TrialCollection(...
            Subjects{SubjectsIdx}.TrainingDataPath(I,:));
        
    end
    for I=1:size(Subjects{SubjectsIdx}.EvaluationDataPath,1)
        load(Subjects{SubjectsIdx}.EvaluationLabelPath(I,:))
        EvaluationTrialCollection{I}=BCISTD.TrialCollection(...
            Subjects{SubjectsIdx}.EvaluationDataPath(I,:),...
            classlabel);
            clear classlabel
    end
    for overlapIdx=1:numel(overlap)
        for windowLengthIdx=1:numel(windowLength)
            h=waitbar(L/numRows,h,['Extraction to DB of Subject ',num2str(SubjectsIdx)]);

            for I=1:numel(TrainingTrialCollection)
                TrainingDB{I}=BCISTD.Database(...
                    overlap(overlapIdx),...
                    windowLength(windowLengthIdx),...
                    TrainingTrialCollection{I});
                TrainingDB{I}=TrainingDB{I}.generateDatasetIndex(...
                    min(TrainingDB{I}.getSampleCountPerLabel()));
                
            end
            for I=1:numel(EvaluationTrialCollection)
                EvaluationDB{I}=BCISTD.Database(...
                    overlap(overlapIdx),...
                    windowLength(windowLengthIdx),...
                    EvaluationTrialCollection{I}...
                    );
                EvaluationDB{I}=EvaluationDB{I}.generateDatasetIndex(...
                    min(EvaluationDB{I}.getSampleCountPerLabel()));
            end
            for FEIdx=1:numel(FeatureExtractionFnc)
                TrainingData=[];
                EvaluationData=[];
                h=waitbar(L/numRows,h,['Extracting Features of Subject ',num2str(SubjectsIdx)]);

                for I=1:numel(TrainingDB)
                    TrainingDB{I}=TrainingDB{I}.setFeatureExtractionFcn(FeatureExtractionFnc{FEIdx});
                    TrainingData=cat(1,TrainingData,TrainingDB{I}.getDataset());
                end
                for I=1:numel(EvaluationDB)
                    EvaluationDB{I}.FeatureExtractionFcn=FeatureExtractionFnc{FEIdx};
                    EvaluationData=cat(1,EvaluationData,EvaluationDB{I}.getDataset());
                end
                for ClassIdx=1:numel(Classifiers)
                    h=waitbar(L/numRows,h,['Training Classifier "', Classifiers{ClassIdx}.Name,'" on Subject ',num2str(SubjectsIdx)]);

                    Classifiers{ClassIdx}.TrainingDataset=TrainingData;
                    Classifiers{ClassIdx}=Classifiers{ClassIdx}.train();
                    [Kappa,Accuracy]=Classifiers{ClassIdx}.calculatePerformance(EvaluationData);
                    [Kappa2,Accuracy2]=Classifiers{ClassIdx}.fullTrialPerformance(EvaluationDB);
                    TrainedClassifier=Classifiers{ClassIdx};
                    name=strcat(path,...
                        'subject',num2str(SubjectsIdx),...
                        '_overlap',num2str(overlap(overlapIdx)*100),...
                        '_window',num2str(windowLength(windowLengthIdx)),...
                        '_',TrainedClassifier.Name,...
                        '_',FeatureExtractionFnc{FEIdx}.Name,...
                        '.mat');
                    save(name,'TrainedClassifier');
                    T(L,:)=cell2table({num2str(SubjectsIdx),...
                        windowLength(windowLengthIdx),...
                        overlap(overlapIdx),...
                        FeatureExtractionFnc{FEIdx}.Name,...
                        Classifiers{ClassIdx}.Name,...
                        Kappa,...
                        Accuracy,...
                        Kappa2,...
                        Accuracy2...
                        },...
                        'VariableNames',...
                        {'Subject',...
                        'Window_Length',...
                        'Overlap',...
                        'Feature_Extraction_Function',...
                        'Classifier',...
                        'Kappa',...
                        'Accuracy',...
                        'FullKappa',...
                        'FullACC'...
                        } );
                    L=L+1;   
                end
                clear TrainingData EvaluationData
            end
            clear TrainingDB EvaluationDB
        end
    end
    clear TrainingTrialCollection EvaluationTrialCollection
end
f=1
end